/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/driverpage_screen/DriverPageViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

DriverPageViewBase::DriverPageViewBase() :
    buttonCallback(this, &DriverPageViewBase::buttonCallbackHandler)
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    box_DriverPageBackground.setPosition(0, 0, 800, 480);
    box_DriverPageBackground.setColor(touchgfx::Color::getColorFromRGB(100, 100, 100));

    gauge_1.setBackground(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
    gauge_1.setBackgroundOffset(0, 5);
    gauge_1.setPosition(100, 180, 600, 300);
    gauge_1.setCenter(300, 300);
    gauge_1.setStartEndAngle(-90, 90);
    gauge_1.setRange(0, 120);
    gauge_1.setValue(57);
    gauge_1.setEasingEquation(touchgfx::EasingEquations::linearEaseIn);
    gauge_1.setNeedle(BITMAP_NEEDLE_0_ID, 3, 275);
    gauge_1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gauge_1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gauge_1.setArcVisible();
    gauge_1Painter.setColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
    gauge_1.getArc().setPainter(gauge_1Painter);
    gauge_1.getArc().setRadius(250);
    gauge_1.getArc().setLineWidth(50);
    gauge_1.getArc().setCapPrecision(180);

    textArea_Speed.setXY(305, 358);
    textArea_Speed.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea_Speed.setLinespacing(0);
    Unicode::snprintf(textArea_SpeedBuffer, TEXTAREA_SPEED_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
    textArea_Speed.setWildcard(textArea_SpeedBuffer);
    textArea_Speed.resizeToCurrentText();
    textArea_Speed.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));

    textArea_Time.setXY(215, 42);
    textArea_Time.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea_Time.setLinespacing(0);
    touchgfx::Unicode::snprintf(textArea_TimeBuffer1, TEXTAREA_TIMEBUFFER1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID6).getText());
    textArea_Time.setWildcard1(textArea_TimeBuffer1);
    touchgfx::Unicode::snprintf(textArea_TimeBuffer2, TEXTAREA_TIMEBUFFER2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID7).getText());
    textArea_Time.setWildcard2(textArea_TimeBuffer2);
    textArea_Time.resizeToCurrentText();
    textArea_Time.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));

    EngieneerPageButtun.setXY(0, 0);
    EngieneerPageButtun.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    EngieneerPageButtun.setLabelText(touchgfx::TypedText(T_SINGLEUSEID2));
    EngieneerPageButtun.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    EngieneerPageButtun.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    EngieneerPageButtun.setAction(buttonCallback);

    button_Timer_Reset.setXY(630, 25);
    button_Timer_Reset.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    button_Timer_Reset.setLabelText(touchgfx::TypedText(T_SINGLEUSEID3));
    button_Timer_Reset.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    button_Timer_Reset.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    button_Timer_Reset.setAction(buttonCallback);

    button_Timer_Start.setXY(630, 110);
    button_Timer_Start.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    button_Timer_Start.setLabelText(touchgfx::TypedText(T_SINGLEUSEID4));
    button_Timer_Start.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    button_Timer_Start.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    button_Timer_Start.setAction(buttonCallback);

    add(__background);
    add(box_DriverPageBackground);
    add(gauge_1);
    add(textArea_Speed);
    add(textArea_Time);
    add(EngieneerPageButtun);
    add(button_Timer_Reset);
    add(button_Timer_Start);
}

void DriverPageViewBase::setupScreen()
{

}

//Handles when a key is pressed
void DriverPageViewBase::handleKeyEvent(uint8_t key)
{
    if(0 == key)
    {
        //Interaction_HW0
        //When hardware button 0 clicked change screen to EngineerPage
        //Go to EngineerPage with no screen transition
        application().gotoEngineerPageScreenNoTransition();
    }
}

void DriverPageViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &EngieneerPageButtun)
    {
        //Interaction_Page
        //When EngieneerPageButtun clicked change screen to EngineerPage
        //Go to EngineerPage with no screen transition
        application().gotoEngineerPageScreenNoTransition();
    }
    else if (&src == &button_Timer_Reset)
    {
        //Interaction_RS
        //When button_Timer_Reset clicked call virtual function
        //Call Time_RS
        Time_RS();
    }
    else if (&src == &button_Timer_Start)
    {
        //Interaction_SS
        //When button_Timer_Start clicked call virtual function
        //Call Time_SS
        Time_SS();
    }
}
